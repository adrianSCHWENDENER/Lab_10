

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Sat May 13 22:51:24 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20     0000                     
    21                           ; Version 2.40
    22                           ; Generated 17/11/2021 GMT
    23                           ; 
    24                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution. Publication is not required when
    38                           ;        this file is used in an embedded application.
    39                           ; 
    40                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    41                           ;        software without specific prior written permission.
    42                           ; 
    43                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    44                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    45                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    46                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    47                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    48                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    49                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    50                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    51                           ; 
    52                           ; 
    53                           ; Code-generator required, PIC16F887 Definitions
    54                           ; 
    55                           ; SFR Addresses
    56     0000                     	;# 
    57     0001                     	;# 
    58     0002                     	;# 
    59     0003                     	;# 
    60     0004                     	;# 
    61     0005                     	;# 
    62     0006                     	;# 
    63     0007                     	;# 
    64     0008                     	;# 
    65     0009                     	;# 
    66     000A                     	;# 
    67     000B                     	;# 
    68     000C                     	;# 
    69     000D                     	;# 
    70     000E                     	;# 
    71     000E                     	;# 
    72     000F                     	;# 
    73     0010                     	;# 
    74     0011                     	;# 
    75     0012                     	;# 
    76     0013                     	;# 
    77     0014                     	;# 
    78     0015                     	;# 
    79     0015                     	;# 
    80     0016                     	;# 
    81     0017                     	;# 
    82     0018                     	;# 
    83     0019                     	;# 
    84     001A                     	;# 
    85     001B                     	;# 
    86     001B                     	;# 
    87     001C                     	;# 
    88     001D                     	;# 
    89     001E                     	;# 
    90     001F                     	;# 
    91     0081                     	;# 
    92     0085                     	;# 
    93     0086                     	;# 
    94     0087                     	;# 
    95     0088                     	;# 
    96     0089                     	;# 
    97     008C                     	;# 
    98     008D                     	;# 
    99     008E                     	;# 
   100     008F                     	;# 
   101     0090                     	;# 
   102     0091                     	;# 
   103     0092                     	;# 
   104     0093                     	;# 
   105     0093                     	;# 
   106     0093                     	;# 
   107     0094                     	;# 
   108     0095                     	;# 
   109     0096                     	;# 
   110     0097                     	;# 
   111     0098                     	;# 
   112     0099                     	;# 
   113     009A                     	;# 
   114     009B                     	;# 
   115     009C                     	;# 
   116     009D                     	;# 
   117     009E                     	;# 
   118     009F                     	;# 
   119     0105                     	;# 
   120     0107                     	;# 
   121     0108                     	;# 
   122     0109                     	;# 
   123     010C                     	;# 
   124     010C                     	;# 
   125     010D                     	;# 
   126     010E                     	;# 
   127     010F                     	;# 
   128     0185                     	;# 
   129     0187                     	;# 
   130     0188                     	;# 
   131     0189                     	;# 
   132     018C                     	;# 
   133     018D                     	;# 
   134     0000                     	;# 
   135     0001                     	;# 
   136     0002                     	;# 
   137     0003                     	;# 
   138     0004                     	;# 
   139     0005                     	;# 
   140     0006                     	;# 
   141     0007                     	;# 
   142     0008                     	;# 
   143     0009                     	;# 
   144     000A                     	;# 
   145     000B                     	;# 
   146     000C                     	;# 
   147     000D                     	;# 
   148     000E                     	;# 
   149     000E                     	;# 
   150     000F                     	;# 
   151     0010                     	;# 
   152     0011                     	;# 
   153     0012                     	;# 
   154     0013                     	;# 
   155     0014                     	;# 
   156     0015                     	;# 
   157     0015                     	;# 
   158     0016                     	;# 
   159     0017                     	;# 
   160     0018                     	;# 
   161     0019                     	;# 
   162     001A                     	;# 
   163     001B                     	;# 
   164     001B                     	;# 
   165     001C                     	;# 
   166     001D                     	;# 
   167     001E                     	;# 
   168     001F                     	;# 
   169     0081                     	;# 
   170     0085                     	;# 
   171     0086                     	;# 
   172     0087                     	;# 
   173     0088                     	;# 
   174     0089                     	;# 
   175     008C                     	;# 
   176     008D                     	;# 
   177     008E                     	;# 
   178     008F                     	;# 
   179     0090                     	;# 
   180     0091                     	;# 
   181     0092                     	;# 
   182     0093                     	;# 
   183     0093                     	;# 
   184     0093                     	;# 
   185     0094                     	;# 
   186     0095                     	;# 
   187     0096                     	;# 
   188     0097                     	;# 
   189     0098                     	;# 
   190     0099                     	;# 
   191     009A                     	;# 
   192     009B                     	;# 
   193     009C                     	;# 
   194     009D                     	;# 
   195     009E                     	;# 
   196     009F                     	;# 
   197     0105                     	;# 
   198     0107                     	;# 
   199     0108                     	;# 
   200     0109                     	;# 
   201     010C                     	;# 
   202     010C                     	;# 
   203     010D                     	;# 
   204     010E                     	;# 
   205     010F                     	;# 
   206     0185                     	;# 
   207     0187                     	;# 
   208     0188                     	;# 
   209     0189                     	;# 
   210     018C                     	;# 
   211     018D                     	;# 
   212                           
   213                           	psect	strings
   214     0232                     __pstrings:
   215     0232                     stringtab:
   216     0232                     __stringtab:
   217     0232                     stringcode:	
   218                           ;	String table - string pointers are 1 byte each
   219                           
   220     0232                     stringdir:
   221     0232  3002               	movlw	high stringdir
   222     0233  008A               	movwf	10
   223     0234  0804               	movf	4,w
   224     0235  0A84               	incf	4,f
   225     0236  0782               	addwf	2,f
   226     0237                     __stringbase:
   227     0237  3400               	retlw	0
   228     0238                     __end_of__stringtab:
   229     0238                     _dpowers:
   230     0238  3401               	retlw	1
   231     0239  3400               	retlw	0
   232     023A  340A               	retlw	10
   233     023B  3400               	retlw	0
   234     023C  3464               	retlw	100
   235     023D  3400               	retlw	0
   236     023E  34E8               	retlw	232
   237     023F  3403               	retlw	3
   238     0240  3410               	retlw	16
   239     0241  3427               	retlw	39
   240     0242                     __end_of_dpowers:
   241     0242                     _data:
   242     0242  340D               	retlw	13
   243     0243                     __end_of_data:
   244     0019                     _TXREG	set	25
   245     0006                     _PORTB	set	6
   246     0018                     _RCSTA	set	24
   247     000C                     _PIR1	set	12
   248     000B                     _INTCON	set	11
   249     0006                     _PORTBbits	set	6
   250     000B                     _INTCONbits	set	11
   251     001A                     _RCREG	set	26
   252     0005                     _PORTA	set	5
   253     000C                     _PIR1bits	set	12
   254     0085                     _TRISA	set	133
   255     0096                     _IOCB	set	150
   256     0095                     _WPUB	set	149
   257     0086                     _TRISB	set	134
   258     0081                     _OPTION_REG	set	129
   259     009A                     _SPBRGH	set	154
   260     0099                     _SPBRG	set	153
   261     0098                     _TXSTA	set	152
   262     008C                     _PIE1	set	140
   263     008F                     _OSCCON	set	143
   264     0189                     _ANSELH	set	393
   265     0188                     _ANSEL	set	392
   266     0187                     _BAUDCTL	set	391
   267     0243                     STR_1:
   268     0243  3425               	retlw	37	;'%'
   269     0244  3464               	retlw	100	;'d'
   270     0245  3400               	retlw	0
   271     0243                     
   272                           	psect	cinit
   273     0015                     start_initialization:	
   274                           ; #config settings
   275                           
   276     0015                     __initialization:
   277                           
   278                           ; Clear objects allocated to BANK0
   279     0015  1283               	bcf	3,5	;RP0=0, select bank0
   280     0016  1303               	bcf	3,6	;RP1=0, select bank0
   281     0017  01B9               	clrf	__pbssBANK0& (0+127)
   282     0018  01BA               	clrf	(__pbssBANK0+1)& (0+127)
   283     0019  01BB               	clrf	(__pbssBANK0+2)& (0+127)
   284     001A                     end_of_initialization:	
   285                           ;End of C runtime variable initialization code
   286                           
   287     001A                     __end_of__initialization:
   288     001A  0183               	clrf	3
   289     001B  120A  118A  2A18   	ljmp	_main	;jump to C main() function
   290                           
   291                           	psect	bssBANK0
   292     0039                     __pbssBANK0:
   293     0039                     _contador:
   294     0039                     	ds	1
   295     003A                     _dato:
   296     003A                     	ds	2
   297                           
   298                           	psect	cstackCOMMON
   299     0070                     __pcstackCOMMON:
   300     0070                     ?_cadena:
   301     0070                     ?_isr:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     ?_setup:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0070                     ?_main:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0070                     ?___lwdiv:	
   311                           ; 1 bytes @ 0x0
   312                           
   313     0070                     ___lwdiv@divisor:	
   314                           ; 2 bytes @ 0x0
   315                           
   316                           
   317                           ; 2 bytes @ 0x0
   318     0070                     	ds	2
   319     0072                     ___lwdiv@dividend:
   320                           
   321                           ; 2 bytes @ 0x2
   322     0072                     	ds	2
   323     0074                     ??___lwdiv:
   324                           
   325                           ; 1 bytes @ 0x4
   326     0074                     	ds	1
   327     0075                     ___lwdiv@quotient:
   328                           
   329                           ; 2 bytes @ 0x5
   330     0075                     	ds	2
   331     0077                     ___lwdiv@counter:
   332                           
   333                           ; 1 bytes @ 0x7
   334     0077                     	ds	1
   335     0078                     ?___lwmod:
   336     0078                     ___lwmod@divisor:	
   337                           ; 2 bytes @ 0x8
   338                           
   339                           
   340                           ; 2 bytes @ 0x8
   341     0078                     	ds	2
   342     007A                     ___lwmod@dividend:
   343                           
   344                           ; 2 bytes @ 0xA
   345     007A                     	ds	2
   346     007C                     ??___lwmod:
   347                           
   348                           ; 1 bytes @ 0xC
   349     007C                     	ds	1
   350     007D                     ___lwmod@counter:
   351                           
   352                           ; 1 bytes @ 0xD
   353     007D                     	ds	1
   354                           
   355                           	psect	cstackBANK0
   356     0020                     __pcstackBANK0:
   357     0020                     ?_sprintf:
   358     0020                     sprintf@f:	
   359                           ; 2 bytes @ 0x0
   360                           
   361                           
   362                           ; 1 bytes @ 0x0
   363     0020                     	ds	3
   364     0023                     ??_sprintf:
   365                           
   366                           ; 1 bytes @ 0x3
   367     0023                     	ds	3
   368     0026                     sprintf@ap:
   369                           
   370                           ; 1 bytes @ 0x6
   371     0026                     	ds	1
   372     0027                     sprintf@flag:
   373                           
   374                           ; 1 bytes @ 0x7
   375     0027                     	ds	1
   376     0028                     sprintf@prec:
   377                           
   378                           ; 1 bytes @ 0x8
   379     0028                     	ds	1
   380     0029                     sprintf@val:
   381                           
   382                           ; 2 bytes @ 0x9
   383     0029                     	ds	2
   384     002B                     sprintf@sp:
   385                           
   386                           ; 1 bytes @ 0xB
   387     002B                     	ds	1
   388     002C                     sprintf@c:
   389                           
   390                           ; 1 bytes @ 0xC
   391     002C                     	ds	1
   392     002D                     ??_isr:
   393                           
   394                           ; 1 bytes @ 0xD
   395     002D                     	ds	6
   396     0033                     ??_cadena:
   397     0033                     ??_setup:	
   398                           ; 1 bytes @ 0x13
   399                           
   400                           
   401                           ; 1 bytes @ 0x13
   402     0033                     	ds	2
   403     0035                     cadena@txt:
   404                           
   405                           ; 1 bytes @ 0x15
   406     0035                     	ds	1
   407     0036                     cadena@i:
   408                           
   409                           ; 1 bytes @ 0x16
   410     0036                     	ds	1
   411     0037                     ??_main:
   412                           
   413                           ; 1 bytes @ 0x17
   414     0037                     	ds	2
   415                           
   416                           	psect	maintext
   417     0218                     __pmaintext:	
   418 ;;
   419 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   420 ;;
   421 ;; *************** function _main *****************
   422 ;; Defined at:
   423 ;;		line 95 in file "Principal.c"
   424 ;; Parameters:    Size  Location     Type
   425 ;;		None
   426 ;; Auto vars:     Size  Location     Type
   427 ;;		None
   428 ;; Return value:  Size  Location     Type
   429 ;;                  1    wreg      void 
   430 ;; Registers used:
   431 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   432 ;; Tracked objects:
   433 ;;		On entry : B00/0
   434 ;;		On exit  : 0/0
   435 ;;		Unchanged: 0/0
   436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   437 ;;      Params:         0       0       0       0       0
   438 ;;      Locals:         0       0       0       0       0
   439 ;;      Temps:          0       2       0       0       0
   440 ;;      Totals:         0       2       0       0       0
   441 ;;Total ram usage:        2 bytes
   442 ;; Hardware stack levels required when called: 4
   443 ;; This function calls:
   444 ;;		_cadena
   445 ;;		_setup
   446 ;; This function is called by:
   447 ;;		Startup code after reset
   448 ;; This function uses a non-reentrant model
   449 ;;
   450                           
   451     0218                     _main:	
   452                           ;psect for function _main
   453                           
   454     0218                     l1069:	
   455                           ;incstack = 0
   456                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   457                           
   458                           
   459                           ;Principal.c: 96:     setup();
   460     0218  120A  118A  21BD  120A  118A  	fcall	_setup
   461     021D                     l1071:
   462                           
   463                           ;Principal.c: 98:         cadena(dato);
   464     021D  303A               	movlw	(low (_dato| 0))& (0+255)
   465     021E  120A  118A  21EC  120A  118A  	fcall	_cadena
   466     0223                     l1073:
   467                           
   468                           ;Principal.c: 99:         _delay((unsigned long)((500)*(1000000/4000.0)));
   469     0223  30A3               	movlw	163
   470     0224  1283               	bcf	3,5	;RP0=0, select bank0
   471     0225  1303               	bcf	3,6	;RP1=0, select bank0
   472     0226  00B8               	movwf	??_main+1
   473     0227  3054               	movlw	84
   474     0228  00B7               	movwf	??_main
   475     0229                     u537:
   476     0229  0BB7               	decfsz	??_main,f
   477     022A  2A29               	goto	u537
   478     022B  0BB8               	decfsz	??_main+1,f
   479     022C  2A29               	goto	u537
   480     022D  0000               	nop
   481     022E  2A1D               	goto	l1071
   482     022F  120A  118A  2812   	ljmp	start
   483     0232                     __end_of_main:
   484                           
   485                           	psect	text1
   486     01BD                     __ptext1:	
   487 ;; *************** function _setup *****************
   488 ;; Defined at:
   489 ;;		line 60 in file "Principal.c"
   490 ;; Parameters:    Size  Location     Type
   491 ;;		None
   492 ;; Auto vars:     Size  Location     Type
   493 ;;		None
   494 ;; Return value:  Size  Location     Type
   495 ;;                  1    wreg      void 
   496 ;; Registers used:
   497 ;;		wreg, status,2
   498 ;; Tracked objects:
   499 ;;		On entry : 0/0
   500 ;;		On exit  : 0/0
   501 ;;		Unchanged: 0/0
   502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   503 ;;      Params:         0       0       0       0       0
   504 ;;      Locals:         0       0       0       0       0
   505 ;;      Temps:          0       0       0       0       0
   506 ;;      Totals:         0       0       0       0       0
   507 ;;Total ram usage:        0 bytes
   508 ;; Hardware stack levels used: 1
   509 ;; Hardware stack levels required when called: 3
   510 ;; This function calls:
   511 ;;		Nothing
   512 ;; This function is called by:
   513 ;;		_main
   514 ;; This function uses a non-reentrant model
   515 ;;
   516                           
   517     01BD                     _setup:	
   518                           ;psect for function _setup
   519                           
   520     01BD                     l1011:	
   521                           ;incstack = 0
   522                           ; Regs used in _setup: [wreg+status,2]
   523                           
   524                           
   525                           ;Principal.c: 62:     OSCCON = 0B01000000;
   526     01BD  3040               	movlw	64
   527     01BE  1683               	bsf	3,5	;RP0=1, select bank1
   528     01BF  1303               	bcf	3,6	;RP1=0, select bank1
   529     01C0  008F               	movwf	15	;volatile
   530                           
   531                           ;Principal.c: 65:     INTCON = 0B11001000;
   532     01C1  30C8               	movlw	200
   533     01C2  008B               	movwf	11	;volatile
   534                           
   535                           ;Principal.c: 66:     PIE1 = 0B00100000;
   536     01C3  3020               	movlw	32
   537     01C4  008C               	movwf	12	;volatile
   538     01C5                     l1013:
   539                           
   540                           ;Principal.c: 67:     PIR1 = 0B00000000;
   541     01C5  1283               	bcf	3,5	;RP0=0, select bank0
   542     01C6  1303               	bcf	3,6	;RP1=0, select bank0
   543     01C7  018C               	clrf	12	;volatile
   544     01C8                     l1015:
   545                           
   546                           ;Principal.c: 70:     TXSTA = 0B00100100;
   547     01C8  3024               	movlw	36
   548     01C9  1683               	bsf	3,5	;RP0=1, select bank1
   549     01CA  1303               	bcf	3,6	;RP1=0, select bank1
   550     01CB  0098               	movwf	24	;volatile
   551     01CC                     l1017:
   552                           
   553                           ;Principal.c: 71:     BAUDCTL = 0B00001000;
   554     01CC  3008               	movlw	8
   555     01CD  1683               	bsf	3,5	;RP0=1, select bank3
   556     01CE  1703               	bsf	3,6	;RP1=1, select bank3
   557     01CF  0087               	movwf	7	;volatile
   558     01D0                     l1019:
   559                           
   560                           ;Principal.c: 72:     RCSTA = 0B10010000;
   561     01D0  3090               	movlw	144
   562     01D1  1283               	bcf	3,5	;RP0=0, select bank0
   563     01D2  1303               	bcf	3,6	;RP1=0, select bank0
   564     01D3  0098               	movwf	24	;volatile
   565     01D4                     l1021:
   566                           
   567                           ;Principal.c: 73:     SPBRG = 25;
   568     01D4  3019               	movlw	25
   569     01D5  1683               	bsf	3,5	;RP0=1, select bank1
   570     01D6  1303               	bcf	3,6	;RP1=0, select bank1
   571     01D7  0099               	movwf	25	;volatile
   572     01D8                     l1023:
   573                           
   574                           ;Principal.c: 74:     SPBRGH = 0;
   575     01D8  019A               	clrf	26	;volatile
   576     01D9                     l1025:
   577                           
   578                           ;Principal.c: 77:     OPTION_REG = 0B00000000;
   579     01D9  0181               	clrf	1	;volatile
   580     01DA                     l1027:
   581                           
   582                           ;Principal.c: 78:     TRISB = 0B00000011;
   583     01DA  3003               	movlw	3
   584     01DB  0086               	movwf	6	;volatile
   585     01DC                     l1029:
   586                           
   587                           ;Principal.c: 79:     WPUB = 0B00000011;
   588     01DC  3003               	movlw	3
   589     01DD  0095               	movwf	21	;volatile
   590     01DE                     l1031:
   591                           
   592                           ;Principal.c: 80:     IOCB = 0B00000011;
   593     01DE  3003               	movlw	3
   594     01DF  0096               	movwf	22	;volatile
   595                           
   596                           ;Principal.c: 83:     ANSEL = 0;
   597     01E0  1683               	bsf	3,5	;RP0=1, select bank3
   598     01E1  1703               	bsf	3,6	;RP1=1, select bank3
   599     01E2  0188               	clrf	8	;volatile
   600                           
   601                           ;Principal.c: 84:     ANSELH = 0;
   602     01E3  0189               	clrf	9	;volatile
   603                           
   604                           ;Principal.c: 85:     TRISA = 0B00000000;
   605     01E4  1683               	bsf	3,5	;RP0=1, select bank1
   606     01E5  1303               	bcf	3,6	;RP1=0, select bank1
   607     01E6  0185               	clrf	5	;volatile
   608                           
   609                           ;Principal.c: 88:     PORTA = 0;
   610     01E7  1283               	bcf	3,5	;RP0=0, select bank0
   611     01E8  1303               	bcf	3,6	;RP1=0, select bank0
   612     01E9  0185               	clrf	5	;volatile
   613                           
   614                           ;Principal.c: 89:     PORTB = 0;
   615     01EA  0186               	clrf	6	;volatile
   616     01EB                     l70:
   617     01EB  0008               	return
   618     01EC                     __end_of_setup:
   619                           
   620                           	psect	text2
   621     01EC                     __ptext2:	
   622 ;; *************** function _cadena *****************
   623 ;; Defined at:
   624 ;;		line 104 in file "Principal.c"
   625 ;; Parameters:    Size  Location     Type
   626 ;;  txt             1    wreg     PTR unsigned char 
   627 ;;		 -> dato(2), 
   628 ;; Auto vars:     Size  Location     Type
   629 ;;  txt             1   21[BANK0 ] PTR unsigned char 
   630 ;;		 -> dato(2), 
   631 ;;  i               1   22[BANK0 ] unsigned char 
   632 ;; Return value:  Size  Location     Type
   633 ;;                  1    wreg      void 
   634 ;; Registers used:
   635 ;;		wreg, fsr0l, fsr0h, status,2, status,0
   636 ;; Tracked objects:
   637 ;;		On entry : 0/0
   638 ;;		On exit  : 0/0
   639 ;;		Unchanged: 0/0
   640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   641 ;;      Params:         0       0       0       0       0
   642 ;;      Locals:         0       2       0       0       0
   643 ;;      Temps:          0       2       0       0       0
   644 ;;      Totals:         0       4       0       0       0
   645 ;;Total ram usage:        4 bytes
   646 ;; Hardware stack levels used: 1
   647 ;; Hardware stack levels required when called: 3
   648 ;; This function calls:
   649 ;;		Nothing
   650 ;; This function is called by:
   651 ;;		_main
   652 ;; This function uses a non-reentrant model
   653 ;;
   654                           
   655     01EC                     _cadena:	
   656                           ;psect for function _cadena
   657                           
   658                           
   659                           ;incstack = 0
   660                           ; Regs used in _cadena: [wreg-fsr0h+status,2+status,0]
   661                           ;cadena@txt stored from wreg
   662     01EC  1283               	bcf	3,5	;RP0=0, select bank0
   663     01ED  1303               	bcf	3,6	;RP1=0, select bank0
   664     01EE  00B5               	movwf	cadena@txt
   665     01EF                     l1035:
   666                           
   667                           ;Principal.c: 105:     for (uint8_t i = 0; txt[i] != '\0'; i++){
   668     01EF  01B6               	clrf	cadena@i
   669     01F0  2A01               	goto	l1041
   670     01F1                     l83:
   671     01F1  1E0C               	btfss	12,4	;volatile
   672     01F2  29F4               	goto	u471
   673     01F3  29F5               	goto	u470
   674     01F4                     u471:
   675     01F4  29F1               	goto	l83
   676     01F5                     u470:
   677     01F5                     l1037:
   678                           
   679                           ;Principal.c: 107:         TXREG = txt[i];
   680     01F5  0836               	movf	cadena@i,w
   681     01F6  0735               	addwf	cadena@txt,w
   682     01F7  00B3               	movwf	??_cadena
   683     01F8  0833               	movf	??_cadena,w
   684     01F9  0084               	movwf	4
   685     01FA  1383               	bcf	3,7	;select IRP bank0
   686     01FB  0800               	movf	0,w
   687     01FC  0099               	movwf	25	;volatile
   688     01FD                     l1039:
   689                           
   690                           ;Principal.c: 108:     }
   691     01FD  3001               	movlw	1
   692     01FE  00B3               	movwf	??_cadena
   693     01FF  0833               	movf	??_cadena,w
   694     0200  07B6               	addwf	cadena@i,f
   695     0201                     l1041:
   696     0201  0836               	movf	cadena@i,w
   697     0202  0735               	addwf	cadena@txt,w
   698     0203  00B3               	movwf	??_cadena
   699     0204  0833               	movf	??_cadena,w
   700     0205  0084               	movwf	4
   701     0206  1383               	bcf	3,7	;select IRP bank0
   702     0207  0800               	movf	0,w
   703     0208  1D03               	btfss	3,2
   704     0209  2A0B               	goto	u481
   705     020A  2A0C               	goto	u480
   706     020B                     u481:
   707     020B  29F1               	goto	l83
   708     020C                     u480:
   709     020C                     l1043:
   710                           
   711                           ;Principal.c: 109:     _delay((unsigned long)((100)*(1000000/4000.0)));
   712     020C  3021               	movlw	33
   713     020D  1283               	bcf	3,5	;RP0=0, select bank0
   714     020E  1303               	bcf	3,6	;RP1=0, select bank0
   715     020F  00B4               	movwf	??_cadena+1
   716     0210  3075               	movlw	117
   717     0211  00B3               	movwf	??_cadena
   718     0212                     u547:
   719     0212  0BB3               	decfsz	??_cadena,f
   720     0213  2A12               	goto	u547
   721     0214  0BB4               	decfsz	??_cadena+1,f
   722     0215  2A12               	goto	u547
   723     0216  2A17               	nop2
   724     0217                     l87:
   725     0217  0008               	return
   726     0218                     __end_of_cadena:
   727                           
   728                           	psect	text3
   729     00F8                     __ptext3:	
   730 ;; *************** function _isr *****************
   731 ;; Defined at:
   732 ;;		line 40 in file "Principal.c"
   733 ;; Parameters:    Size  Location     Type
   734 ;;		None
   735 ;; Auto vars:     Size  Location     Type
   736 ;;		None
   737 ;; Return value:  Size  Location     Type
   738 ;;                  1    wreg      void 
   739 ;; Registers used:
   740 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   741 ;; Tracked objects:
   742 ;;		On entry : 0/0
   743 ;;		On exit  : 0/0
   744 ;;		Unchanged: 0/0
   745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   746 ;;      Params:         0       0       0       0       0
   747 ;;      Locals:         0       0       0       0       0
   748 ;;      Temps:          0       6       0       0       0
   749 ;;      Totals:         0       6       0       0       0
   750 ;;Total ram usage:        6 bytes
   751 ;; Hardware stack levels used: 1
   752 ;; Hardware stack levels required when called: 2
   753 ;; This function calls:
   754 ;;		_sprintf
   755 ;; This function is called by:
   756 ;;		Interrupt level 1
   757 ;; This function uses a non-reentrant model
   758 ;;
   759                           
   760     00F8                     _isr:	
   761                           ;psect for function _isr
   762                           
   763     00F8                     i1l1045:
   764                           
   765                           ;Principal.c: 41:     if (PIR1bits.RCIF){
   766     00F8  1E8C               	btfss	12,5	;volatile
   767     00F9  28FB               	goto	u49_21
   768     00FA  28FC               	goto	u49_20
   769     00FB                     u49_21:
   770     00FB  28FE               	goto	i1l1049
   771     00FC                     u49_20:
   772     00FC                     i1l1047:
   773                           
   774                           ;Principal.c: 42:         PORTA = RCREG;
   775     00FC  081A               	movf	26,w	;volatile
   776     00FD  0085               	movwf	5	;volatile
   777     00FE                     i1l1049:
   778                           
   779                           ;Principal.c: 44:     if (INTCONbits.RBIF){
   780     00FE  1C0B               	btfss	11,0	;volatile
   781     00FF  2901               	goto	u50_21
   782     0100  2902               	goto	u50_20
   783     0101                     u50_21:
   784     0101  2930               	goto	i1l1063
   785     0102                     u50_20:
   786     0102                     i1l1051:
   787                           
   788                           ;Principal.c: 45:         if (PORTBbits.RB0){
   789     0102  1C06               	btfss	6,0	;volatile
   790     0103  2905               	goto	u51_21
   791     0104  2906               	goto	u51_20
   792     0105                     u51_21:
   793     0105  2919               	goto	i1l1057
   794     0106                     u51_20:
   795     0106                     i1l1053:
   796                           
   797                           ;Principal.c: 46:             contador += 1;
   798     0106  3001               	movlw	1
   799     0107  00AD               	movwf	??_isr
   800     0108  082D               	movf	??_isr,w
   801     0109  07B9               	addwf	_contador,f
   802     010A                     i1l1055:
   803                           
   804                           ;Principal.c: 47:             sprintf(dato, "%d", contador);
   805     010A  300C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   806     010B  00A0               	movwf	sprintf@f
   807     010C  0839               	movf	_contador,w
   808     010D  00AD               	movwf	??_isr
   809     010E  01AE               	clrf	??_isr+1
   810     010F  082D               	movf	??_isr,w
   811     0110  00A1               	movwf	?_sprintf+1
   812     0111  082E               	movf	??_isr+1,w
   813     0112  00A2               	movwf	?_sprintf+2
   814     0113  303A               	movlw	(low (_dato| 0))& (0+255)
   815     0114  120A  118A  201E  120A  118A  	fcall	_sprintf
   816     0119                     i1l1057:
   817                           
   818                           ;Principal.c: 49:         if (PORTBbits.RB1){
   819     0119  1283               	bcf	3,5	;RP0=0, select bank0
   820     011A  1303               	bcf	3,6	;RP1=0, select bank0
   821     011B  1C86               	btfss	6,1	;volatile
   822     011C  291E               	goto	u52_21
   823     011D  291F               	goto	u52_20
   824     011E                     u52_21:
   825     011E  2930               	goto	i1l1063
   826     011F                     u52_20:
   827     011F                     i1l1059:
   828                           
   829                           ;Principal.c: 50:             contador -= 1;
   830     011F  3001               	movlw	1
   831     0120  02B9               	subwf	_contador,f
   832     0121                     i1l1061:
   833                           
   834                           ;Principal.c: 51:             sprintf(dato, "%d", contador);
   835     0121  300C               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   836     0122  00A0               	movwf	sprintf@f
   837     0123  0839               	movf	_contador,w
   838     0124  00AD               	movwf	??_isr
   839     0125  01AE               	clrf	??_isr+1
   840     0126  082D               	movf	??_isr,w
   841     0127  00A1               	movwf	?_sprintf+1
   842     0128  082E               	movf	??_isr+1,w
   843     0129  00A2               	movwf	?_sprintf+2
   844     012A  303A               	movlw	(low (_dato| 0))& (0+255)
   845     012B  120A  118A  201E  120A  118A  	fcall	_sprintf
   846     0130                     i1l1063:
   847                           
   848                           ;Principal.c: 54:     INTCONbits.RBIF = 0;
   849     0130  100B               	bcf	11,0	;volatile
   850     0131                     i1l1065:
   851                           
   852                           ;Principal.c: 55:     PIR1bits.RCIF = 0;
   853     0131  1283               	bcf	3,5	;RP0=0, select bank0
   854     0132  1303               	bcf	3,6	;RP1=0, select bank0
   855     0133  128C               	bcf	12,5	;volatile
   856     0134                     i1l67:
   857     0134  0832               	movf	??_isr+5,w
   858     0135  00FF               	movwf	btemp+1
   859     0136  0831               	movf	??_isr+4,w
   860     0137  008A               	movwf	10
   861     0138  0830               	movf	??_isr+3,w
   862     0139  0084               	movwf	4
   863     013A  0E2F               	swapf	??_isr+2,w
   864     013B  0083               	movwf	3
   865     013C  0EFE               	swapf	btemp,f
   866     013D  0E7E               	swapf	btemp,w
   867     013E  0009               	retfie
   868     013F                     __end_of_isr:
   869                           
   870                           	psect	intentry
   871     0004                     __pintentry:	
   872                           ;incstack = 0
   873                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   874                           
   875     0004                     interrupt_function:
   876     007E                     saved_w	set	btemp
   877     0004  00FE               	movwf	btemp
   878     0005  0E03               	swapf	3,w
   879     0006  1283               	bcf	3,5	;RP0=0, select bank0
   880     0007  1303               	bcf	3,6	;RP1=0, select bank0
   881     0008  00AF               	movwf	??_isr+2
   882     0009  0804               	movf	4,w
   883     000A  00B0               	movwf	??_isr+3
   884     000B  080A               	movf	10,w
   885     000C  00B1               	movwf	??_isr+4
   886     000D  087F               	movf	btemp+1,w
   887     000E  00B2               	movwf	??_isr+5
   888     000F  120A  118A  28F8   	ljmp	_isr
   889                           
   890                           	psect	text4
   891     001E                     __ptext4:	
   892 ;; *************** function _sprintf *****************
   893 ;; Defined at:
   894 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
   895 ;; Parameters:    Size  Location     Type
   896 ;;  sp              1    wreg     PTR unsigned char 
   897 ;;		 -> dato(2), 
   898 ;;  f               1    0[BANK0 ] PTR const unsigned char 
   899 ;;		 -> STR_2(3), STR_1(3), 
   900 ;; Auto vars:     Size  Location     Type
   901 ;;  sp              1   11[BANK0 ] PTR unsigned char 
   902 ;;		 -> dato(2), 
   903 ;;  tmpval          4    0        struct .
   904 ;;  val             2    9[BANK0 ] unsigned int 
   905 ;;  cp              2    0        PTR const unsigned char 
   906 ;;  len             2    0        unsigned int 
   907 ;;  c               1   12[BANK0 ] unsigned char 
   908 ;;  prec            1    8[BANK0 ] char 
   909 ;;  flag            1    7[BANK0 ] unsigned char 
   910 ;;  ap              1    6[BANK0 ] PTR void [1]
   911 ;;		 -> ?_sprintf(2), 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  2    0[BANK0 ] int 
   914 ;; Registers used:
   915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   921 ;;      Params:         0       3       0       0       0
   922 ;;      Locals:         0       7       0       0       0
   923 ;;      Temps:          0       3       0       0       0
   924 ;;      Totals:         0      13       0       0       0
   925 ;;Total ram usage:       13 bytes
   926 ;; Hardware stack levels used: 1
   927 ;; Hardware stack levels required when called: 1
   928 ;; This function calls:
   929 ;;		___lwdiv
   930 ;;		___lwmod
   931 ;; This function is called by:
   932 ;;		_isr
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936     001E                     _sprintf:	
   937                           ;psect for function _sprintf
   938                           
   939                           
   940                           ;incstack = 0
   941                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   942                           ;sprintf@sp stored from wreg
   943     001E  1283               	bcf	3,5	;RP0=0, select bank0
   944     001F  1303               	bcf	3,6	;RP1=0, select bank0
   945     0020  00AB               	movwf	sprintf@sp
   946     0021                     i1l949:
   947                           
   948                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
   949     0021  3021               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
   950     0022  00A6               	movwf	sprintf@ap
   951                           
   952                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
   953     0023  28E3               	goto	i1l1001
   954     0024                     i1l951:
   955                           
   956                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
   957     0024  3025               	movlw	37
   958     0025  062C               	xorwf	sprintf@c,w
   959     0026  1903               	btfsc	3,2
   960     0027  2829               	goto	u40_21
   961     0028  282A               	goto	u40_20
   962     0029                     u40_21:
   963     0029  2834               	goto	i1l957
   964     002A                     u40_20:
   965     002A                     i1l953:
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
   968     002A  082B               	movf	sprintf@sp,w
   969     002B  0084               	movwf	4
   970     002C  082C               	movf	sprintf@c,w
   971     002D  1383               	bcf	3,7	;select IRP bank0
   972     002E  0080               	movwf	0
   973     002F                     i1l955:
   974     002F  3001               	movlw	1
   975     0030  00A3               	movwf	??_sprintf
   976     0031  0823               	movf	??_sprintf,w
   977     0032  07AB               	addwf	sprintf@sp,f
   978                           
   979                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
   980     0033  28E3               	goto	i1l1001
   981     0034                     i1l957:
   982                           
   983                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
   984     0034  01A7               	clrf	sprintf@flag
   985     0035                     i1l961:	
   986                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
   987                           
   988     0035  3001               	movlw	1
   989     0036  07A0               	addwf	sprintf@f,f
   990     0037  30FF               	movlw	-1
   991     0038  0720               	addwf	sprintf@f,w
   992     0039  0084               	movwf	4
   993     003A  120A  118A  2232  120A  118A  	fcall	stringdir
   994     003F  00AC               	movwf	sprintf@c
   995     0040  00A3               	movwf	??_sprintf
   996     0041  01A4               	clrf	??_sprintf+1
   997                           
   998                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   999                           ; Switch size 1, requested type "simple"
  1000                           ; Number of cases is 1, Range of values is 0 to 0
  1001                           ; switch strategies available:
  1002                           ; Name         Instructions Cycles
  1003                           ; simple_byte            4     3 (average)
  1004                           ; direct_byte           11     8 (fixed)
  1005                           ; jumptable            260     6 (fixed)
  1006                           ;	Chosen strategy is simple_byte
  1007     0042  0824               	movf	??_sprintf+1,w
  1008     0043  3A00               	xorlw	0	; case 0
  1009     0044  1903               	skipnz
  1010     0045  2847               	goto	i1l1095
  1011     0046  28E3               	goto	i1l1001
  1012     0047                     i1l1095:
  1013                           
  1014                           ; Switch size 1, requested type "simple"
  1015                           ; Number of cases is 3, Range of values is 0 to 105
  1016                           ; switch strategies available:
  1017                           ; Name         Instructions Cycles
  1018                           ; simple_byte           10     6 (average)
  1019                           ; jumptable            260     6 (fixed)
  1020                           ;	Chosen strategy is simple_byte
  1021     0047  0823               	movf	??_sprintf,w
  1022     0048  3A00               	xorlw	0	; case 0
  1023     0049  1903               	skipnz
  1024     004A  28F3               	goto	i1l1003
  1025     004B  3A64               	xorlw	100	; case 100
  1026     004C  1903               	skipnz
  1027     004D  2852               	goto	i1l963
  1028     004E  3A0D               	xorlw	13	; case 105
  1029     004F  1903               	skipnz
  1030     0050  2852               	goto	i1l963
  1031     0051  28E3               	goto	i1l1001
  1032     0052                     i1l963:
  1033                           
  1034                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1035     0052  0826               	movf	sprintf@ap,w
  1036     0053  0084               	movwf	4
  1037     0054  1383               	bcf	3,7	;select IRP bank0
  1038     0055  0800               	movf	0,w
  1039     0056  00A9               	movwf	sprintf@val
  1040     0057  0A84               	incf	4,f
  1041     0058  0800               	movf	0,w
  1042     0059  00AA               	movwf	sprintf@val+1
  1043     005A                     i1l965:
  1044     005A  3002               	movlw	2
  1045     005B  00A3               	movwf	??_sprintf
  1046     005C  0823               	movf	??_sprintf,w
  1047     005D  07A6               	addwf	sprintf@ap,f
  1048     005E                     i1l967:
  1049                           
  1050                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1051     005E  1FAA               	btfss	sprintf@val+1,7
  1052     005F  2861               	goto	u41_21
  1053     0060  2862               	goto	u41_20
  1054     0061                     u41_21:
  1055     0061  286B               	goto	i1l973
  1056     0062                     u41_20:
  1057     0062                     i1l969:
  1058                           
  1059                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1060     0062  3003               	movlw	3
  1061     0063  00A3               	movwf	??_sprintf
  1062     0064  0823               	movf	??_sprintf,w
  1063     0065  04A7               	iorwf	sprintf@flag,f
  1064     0066                     i1l971:
  1065                           
  1066                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1067     0066  09A9               	comf	sprintf@val,f
  1068     0067  09AA               	comf	sprintf@val+1,f
  1069     0068  0AA9               	incf	sprintf@val,f
  1070     0069  1903               	skipnz
  1071     006A  0AAA               	incf	sprintf@val+1,f
  1072     006B                     i1l973:
  1073                           
  1074                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1075     006B  01AC               	clrf	sprintf@c
  1076     006C  0AAC               	incf	sprintf@c,f
  1077     006D                     i1l979:
  1078                           
  1079                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1080     006D  082C               	movf	sprintf@c,w
  1081     006E  00A3               	movwf	??_sprintf
  1082     006F  0723               	addwf	??_sprintf,w
  1083     0070  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1084     0071  0084               	movwf	4
  1085     0072  120A  118A  2232  120A  118A  	fcall	stringdir
  1086     0077  00A4               	movwf	??_sprintf+1
  1087     0078  120A  118A  2232  120A  118A  	fcall	stringdir
  1088     007D  00A5               	movwf	??_sprintf+2
  1089     007E  0825               	movf	??_sprintf+2,w
  1090     007F  022A               	subwf	sprintf@val+1,w
  1091     0080  1D03               	skipz
  1092     0081  2884               	goto	u42_25
  1093     0082  0824               	movf	??_sprintf+1,w
  1094     0083  0229               	subwf	sprintf@val,w
  1095     0084                     u42_25:
  1096     0084  1803               	skipnc
  1097     0085  2887               	goto	u42_21
  1098     0086  2888               	goto	u42_20
  1099     0087                     u42_21:
  1100     0087  2889               	goto	i1l983
  1101     0088                     u42_20:
  1102     0088  2893               	goto	i1l985
  1103     0089                     i1l983:
  1104     0089  3001               	movlw	1
  1105     008A  00A3               	movwf	??_sprintf
  1106     008B  0823               	movf	??_sprintf,w
  1107     008C  07AC               	addwf	sprintf@c,f
  1108     008D  3005               	movlw	5
  1109     008E  062C               	xorwf	sprintf@c,w
  1110     008F  1D03               	btfss	3,2
  1111     0090  2892               	goto	u43_21
  1112     0091  2893               	goto	u43_20
  1113     0092                     u43_21:
  1114     0092  286D               	goto	i1l979
  1115     0093                     u43_20:
  1116     0093                     i1l985:
  1117                           
  1118                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1119     0093  0827               	movf	sprintf@flag,w
  1120     0094  3903               	andlw	3
  1121     0095  1903               	btfsc	3,2
  1122     0096  2898               	goto	u44_21
  1123     0097  2899               	goto	u44_20
  1124     0098                     u44_21:
  1125     0098  28A2               	goto	i1l991
  1126     0099                     u44_20:
  1127     0099                     i1l987:
  1128                           
  1129                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1130     0099  082B               	movf	sprintf@sp,w
  1131     009A  0084               	movwf	4
  1132     009B  302D               	movlw	45
  1133     009C  1383               	bcf	3,7	;select IRP bank0
  1134     009D  0080               	movwf	0
  1135     009E                     i1l989:
  1136     009E  3001               	movlw	1
  1137     009F  00A3               	movwf	??_sprintf
  1138     00A0  0823               	movf	??_sprintf,w
  1139     00A1  07AB               	addwf	sprintf@sp,f
  1140     00A2                     i1l991:
  1141                           
  1142                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1143     00A2  082C               	movf	sprintf@c,w
  1144     00A3  00A8               	movwf	sprintf@prec
  1145                           
  1146                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1147     00A4  28DA               	goto	i1l999
  1148     00A5                     i1l993:
  1149                           
  1150                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1151     00A5  300A               	movlw	10
  1152     00A6  00F8               	movwf	___lwmod@divisor
  1153     00A7  3000               	movlw	0
  1154     00A8  00F9               	movwf	___lwmod@divisor+1
  1155     00A9  0828               	movf	sprintf@prec,w
  1156     00AA  00A3               	movwf	??_sprintf
  1157     00AB  0723               	addwf	??_sprintf,w
  1158     00AC  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1159     00AD  0084               	movwf	4
  1160     00AE  120A  118A  2232  120A  118A  	fcall	stringdir
  1161     00B3  00F0               	movwf	___lwdiv@divisor
  1162     00B4  120A  118A  2232  120A  118A  	fcall	stringdir
  1163     00B9  00F1               	movwf	___lwdiv@divisor+1
  1164     00BA  082A               	movf	sprintf@val+1,w
  1165     00BB  00F3               	movwf	___lwdiv@dividend+1
  1166     00BC  0829               	movf	sprintf@val,w
  1167     00BD  00F2               	movwf	___lwdiv@dividend
  1168     00BE  120A  118A  213F  120A  118A  	fcall	___lwdiv
  1169     00C3  0871               	movf	?___lwdiv+1,w
  1170     00C4  00FB               	movwf	___lwmod@dividend+1
  1171     00C5  0870               	movf	?___lwdiv,w
  1172     00C6  00FA               	movwf	___lwmod@dividend
  1173     00C7  120A  118A  2183  120A  118A  	fcall	___lwmod
  1174     00CC  0878               	movf	?___lwmod,w
  1175     00CD  3E30               	addlw	48
  1176     00CE  1283               	bcf	3,5	;RP0=0, select bank0
  1177     00CF  1303               	bcf	3,6	;RP1=0, select bank0
  1178     00D0  00AC               	movwf	sprintf@c
  1179     00D1                     i1l995:
  1180                           
  1181                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1182     00D1  082B               	movf	sprintf@sp,w
  1183     00D2  0084               	movwf	4
  1184     00D3  082C               	movf	sprintf@c,w
  1185     00D4  1383               	bcf	3,7	;select IRP bank0
  1186     00D5  0080               	movwf	0
  1187     00D6                     i1l997:
  1188     00D6  3001               	movlw	1
  1189     00D7  00A3               	movwf	??_sprintf
  1190     00D8  0823               	movf	??_sprintf,w
  1191     00D9  07AB               	addwf	sprintf@sp,f
  1192     00DA                     i1l999:
  1193                           
  1194                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1195     00DA  30FF               	movlw	255
  1196     00DB  00A3               	movwf	??_sprintf
  1197     00DC  0823               	movf	??_sprintf,w
  1198     00DD  07A8               	addwf	sprintf@prec,f
  1199     00DE  0A28               	incf	sprintf@prec,w
  1200     00DF  1D03               	btfss	3,2
  1201     00E0  28E2               	goto	u45_21
  1202     00E1  28E3               	goto	u45_20
  1203     00E2                     u45_21:
  1204     00E2  28A5               	goto	i1l993
  1205     00E3                     u45_20:
  1206     00E3                     i1l1001:
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1209     00E3  3001               	movlw	1
  1210     00E4  07A0               	addwf	sprintf@f,f
  1211     00E5  30FF               	movlw	-1
  1212     00E6  0720               	addwf	sprintf@f,w
  1213     00E7  0084               	movwf	4
  1214     00E8  120A  118A  2232  120A  118A  	fcall	stringdir
  1215     00ED  00AC               	movwf	sprintf@c
  1216     00EE  082C               	movf	sprintf@c,w
  1217     00EF  1D03               	btfss	3,2
  1218     00F0  28F2               	goto	u46_21
  1219     00F1  28F3               	goto	u46_20
  1220     00F2                     u46_21:
  1221     00F2  2824               	goto	i1l951
  1222     00F3                     u46_20:
  1223     00F3                     i1l1003:
  1224                           
  1225                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1226     00F3  082B               	movf	sprintf@sp,w
  1227     00F4  0084               	movwf	4
  1228     00F5  1383               	bcf	3,7	;select IRP bank0
  1229     00F6  0180               	clrf	0
  1230     00F7                     i1l197:
  1231     00F7  0008               	return
  1232     00F8                     __end_of_sprintf:
  1233                           
  1234                           	psect	text5
  1235     0183                     __ptext5:	
  1236 ;; *************** function ___lwmod *****************
  1237 ;; Defined at:
  1238 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1239 ;; Parameters:    Size  Location     Type
  1240 ;;  divisor         2    8[COMMON] unsigned int 
  1241 ;;  dividend        2   10[COMMON] unsigned int 
  1242 ;; Auto vars:     Size  Location     Type
  1243 ;;  counter         1   13[COMMON] unsigned char 
  1244 ;; Return value:  Size  Location     Type
  1245 ;;                  2    8[COMMON] unsigned int 
  1246 ;; Registers used:
  1247 ;;		wreg, status,2, status,0
  1248 ;; Tracked objects:
  1249 ;;		On entry : 0/0
  1250 ;;		On exit  : 0/0
  1251 ;;		Unchanged: 0/0
  1252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1253 ;;      Params:         4       0       0       0       0
  1254 ;;      Locals:         1       0       0       0       0
  1255 ;;      Temps:          1       0       0       0       0
  1256 ;;      Totals:         6       0       0       0       0
  1257 ;;Total ram usage:        6 bytes
  1258 ;; Hardware stack levels used: 1
  1259 ;; This function calls:
  1260 ;;		Nothing
  1261 ;; This function is called by:
  1262 ;;		_sprintf
  1263 ;; This function uses a non-reentrant model
  1264 ;;
  1265                           
  1266     0183                     ___lwmod:	
  1267                           ;psect for function ___lwmod
  1268                           
  1269     0183                     i1l927:	
  1270                           ;incstack = 0
  1271                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1272                           
  1273     0183  0878               	movf	___lwmod@divisor,w
  1274     0184  0479               	iorwf	___lwmod@divisor+1,w
  1275     0185  1903               	btfsc	3,2
  1276     0186  2988               	goto	u34_21
  1277     0187  2989               	goto	u34_20
  1278     0188                     u34_21:
  1279     0188  29B8               	goto	i1l945
  1280     0189                     u34_20:
  1281     0189                     i1l929:
  1282     0189  01FD               	clrf	___lwmod@counter
  1283     018A  0AFD               	incf	___lwmod@counter,f
  1284     018B  2997               	goto	i1l935
  1285     018C                     i1l931:
  1286     018C  3001               	movlw	1
  1287     018D                     u35_25:
  1288     018D  1003               	clrc
  1289     018E  0DF8               	rlf	___lwmod@divisor,f
  1290     018F  0DF9               	rlf	___lwmod@divisor+1,f
  1291     0190  3EFF               	addlw	-1
  1292     0191  1D03               	skipz
  1293     0192  298D               	goto	u35_25
  1294     0193                     i1l933:
  1295     0193  3001               	movlw	1
  1296     0194  00FC               	movwf	??___lwmod
  1297     0195  087C               	movf	??___lwmod,w
  1298     0196  07FD               	addwf	___lwmod@counter,f
  1299     0197                     i1l935:
  1300     0197  1FF9               	btfss	___lwmod@divisor+1,7
  1301     0198  299A               	goto	u36_21
  1302     0199  299B               	goto	u36_20
  1303     019A                     u36_21:
  1304     019A  298C               	goto	i1l931
  1305     019B                     u36_20:
  1306     019B                     i1l937:
  1307     019B  0879               	movf	___lwmod@divisor+1,w
  1308     019C  027B               	subwf	___lwmod@dividend+1,w
  1309     019D  1D03               	skipz
  1310     019E  29A1               	goto	u37_25
  1311     019F  0878               	movf	___lwmod@divisor,w
  1312     01A0  027A               	subwf	___lwmod@dividend,w
  1313     01A1                     u37_25:
  1314     01A1  1C03               	skipc
  1315     01A2  29A4               	goto	u37_21
  1316     01A3  29A5               	goto	u37_20
  1317     01A4                     u37_21:
  1318     01A4  29AB               	goto	i1l941
  1319     01A5                     u37_20:
  1320     01A5                     i1l939:
  1321     01A5  0878               	movf	___lwmod@divisor,w
  1322     01A6  02FA               	subwf	___lwmod@dividend,f
  1323     01A7  0879               	movf	___lwmod@divisor+1,w
  1324     01A8  1C03               	skipc
  1325     01A9  03FB               	decf	___lwmod@dividend+1,f
  1326     01AA  02FB               	subwf	___lwmod@dividend+1,f
  1327     01AB                     i1l941:
  1328     01AB  3001               	movlw	1
  1329     01AC                     u38_25:
  1330     01AC  1003               	clrc
  1331     01AD  0CF9               	rrf	___lwmod@divisor+1,f
  1332     01AE  0CF8               	rrf	___lwmod@divisor,f
  1333     01AF  3EFF               	addlw	-1
  1334     01B0  1D03               	skipz
  1335     01B1  29AC               	goto	u38_25
  1336     01B2                     i1l943:
  1337     01B2  3001               	movlw	1
  1338     01B3  02FD               	subwf	___lwmod@counter,f
  1339     01B4  1D03               	btfss	3,2
  1340     01B5  29B7               	goto	u39_21
  1341     01B6  29B8               	goto	u39_20
  1342     01B7                     u39_21:
  1343     01B7  299B               	goto	i1l937
  1344     01B8                     u39_20:
  1345     01B8                     i1l945:
  1346     01B8  087B               	movf	___lwmod@dividend+1,w
  1347     01B9  00F9               	movwf	?___lwmod+1
  1348     01BA  087A               	movf	___lwmod@dividend,w
  1349     01BB  00F8               	movwf	?___lwmod
  1350     01BC                     i1l483:
  1351     01BC  0008               	return
  1352     01BD                     __end_of___lwmod:
  1353                           
  1354                           	psect	text6
  1355     013F                     __ptext6:	
  1356 ;; *************** function ___lwdiv *****************
  1357 ;; Defined at:
  1358 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;  divisor         2    0[COMMON] unsigned int 
  1361 ;;  dividend        2    2[COMMON] unsigned int 
  1362 ;; Auto vars:     Size  Location     Type
  1363 ;;  quotient        2    5[COMMON] unsigned int 
  1364 ;;  counter         1    7[COMMON] unsigned char 
  1365 ;; Return value:  Size  Location     Type
  1366 ;;                  2    0[COMMON] unsigned int 
  1367 ;; Registers used:
  1368 ;;		wreg, status,2, status,0
  1369 ;; Tracked objects:
  1370 ;;		On entry : 0/0
  1371 ;;		On exit  : 0/0
  1372 ;;		Unchanged: 0/0
  1373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1374 ;;      Params:         4       0       0       0       0
  1375 ;;      Locals:         3       0       0       0       0
  1376 ;;      Temps:          1       0       0       0       0
  1377 ;;      Totals:         8       0       0       0       0
  1378 ;;Total ram usage:        8 bytes
  1379 ;; Hardware stack levels used: 1
  1380 ;; This function calls:
  1381 ;;		Nothing
  1382 ;; This function is called by:
  1383 ;;		_sprintf
  1384 ;; This function uses a non-reentrant model
  1385 ;;
  1386                           
  1387     013F                     ___lwdiv:	
  1388                           ;psect for function ___lwdiv
  1389                           
  1390     013F                     i1l901:	
  1391                           ;incstack = 0
  1392                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1393                           
  1394     013F  01F5               	clrf	___lwdiv@quotient
  1395     0140  01F6               	clrf	___lwdiv@quotient+1
  1396     0141                     i1l903:
  1397     0141  0870               	movf	___lwdiv@divisor,w
  1398     0142  0471               	iorwf	___lwdiv@divisor+1,w
  1399     0143  1903               	btfsc	3,2
  1400     0144  2946               	goto	u27_21
  1401     0145  2947               	goto	u27_20
  1402     0146                     u27_21:
  1403     0146  297E               	goto	i1l923
  1404     0147                     u27_20:
  1405     0147                     i1l905:
  1406     0147  01F7               	clrf	___lwdiv@counter
  1407     0148  0AF7               	incf	___lwdiv@counter,f
  1408     0149  2955               	goto	i1l911
  1409     014A                     i1l907:
  1410     014A  3001               	movlw	1
  1411     014B                     u28_25:
  1412     014B  1003               	clrc
  1413     014C  0DF0               	rlf	___lwdiv@divisor,f
  1414     014D  0DF1               	rlf	___lwdiv@divisor+1,f
  1415     014E  3EFF               	addlw	-1
  1416     014F  1D03               	skipz
  1417     0150  294B               	goto	u28_25
  1418     0151                     i1l909:
  1419     0151  3001               	movlw	1
  1420     0152  00F4               	movwf	??___lwdiv
  1421     0153  0874               	movf	??___lwdiv,w
  1422     0154  07F7               	addwf	___lwdiv@counter,f
  1423     0155                     i1l911:
  1424     0155  1FF1               	btfss	___lwdiv@divisor+1,7
  1425     0156  2958               	goto	u29_21
  1426     0157  2959               	goto	u29_20
  1427     0158                     u29_21:
  1428     0158  294A               	goto	i1l907
  1429     0159                     u29_20:
  1430     0159                     i1l913:
  1431     0159  3001               	movlw	1
  1432     015A                     u30_25:
  1433     015A  1003               	clrc
  1434     015B  0DF5               	rlf	___lwdiv@quotient,f
  1435     015C  0DF6               	rlf	___lwdiv@quotient+1,f
  1436     015D  3EFF               	addlw	-1
  1437     015E  1D03               	skipz
  1438     015F  295A               	goto	u30_25
  1439     0160  0871               	movf	___lwdiv@divisor+1,w
  1440     0161  0273               	subwf	___lwdiv@dividend+1,w
  1441     0162  1D03               	skipz
  1442     0163  2966               	goto	u31_25
  1443     0164  0870               	movf	___lwdiv@divisor,w
  1444     0165  0272               	subwf	___lwdiv@dividend,w
  1445     0166                     u31_25:
  1446     0166  1C03               	skipc
  1447     0167  2969               	goto	u31_21
  1448     0168  296A               	goto	u31_20
  1449     0169                     u31_21:
  1450     0169  2971               	goto	i1l919
  1451     016A                     u31_20:
  1452     016A                     i1l915:
  1453     016A  0870               	movf	___lwdiv@divisor,w
  1454     016B  02F2               	subwf	___lwdiv@dividend,f
  1455     016C  0871               	movf	___lwdiv@divisor+1,w
  1456     016D  1C03               	skipc
  1457     016E  03F3               	decf	___lwdiv@dividend+1,f
  1458     016F  02F3               	subwf	___lwdiv@dividend+1,f
  1459     0170                     i1l917:
  1460     0170  1475               	bsf	___lwdiv@quotient,0
  1461     0171                     i1l919:
  1462     0171  3001               	movlw	1
  1463     0172                     u32_25:
  1464     0172  1003               	clrc
  1465     0173  0CF1               	rrf	___lwdiv@divisor+1,f
  1466     0174  0CF0               	rrf	___lwdiv@divisor,f
  1467     0175  3EFF               	addlw	-1
  1468     0176  1D03               	skipz
  1469     0177  2972               	goto	u32_25
  1470     0178                     i1l921:
  1471     0178  3001               	movlw	1
  1472     0179  02F7               	subwf	___lwdiv@counter,f
  1473     017A  1D03               	btfss	3,2
  1474     017B  297D               	goto	u33_21
  1475     017C  297E               	goto	u33_20
  1476     017D                     u33_21:
  1477     017D  2959               	goto	i1l913
  1478     017E                     u33_20:
  1479     017E                     i1l923:
  1480     017E  0876               	movf	___lwdiv@quotient+1,w
  1481     017F  00F1               	movwf	?___lwdiv+1
  1482     0180  0875               	movf	___lwdiv@quotient,w
  1483     0181  00F0               	movwf	?___lwdiv
  1484     0182                     i1l473:
  1485     0182  0008               	return
  1486     0183                     __end_of___lwdiv:
  1487     007E                     btemp	set	126	;btemp
  1488     007E                     wtemp0	set	126
  1489                           
  1490                           	psect	idloc
  1491                           
  1492                           ;Config register IDLOC0 @ 0x2000
  1493                           ;	unspecified, using default values
  1494     2000                     	org	8192
  1495     2000  3FFF               	dw	16383
  1496                           
  1497                           ;Config register IDLOC1 @ 0x2001
  1498                           ;	unspecified, using default values
  1499     2001                     	org	8193
  1500     2001  3FFF               	dw	16383
  1501                           
  1502                           ;Config register IDLOC2 @ 0x2002
  1503                           ;	unspecified, using default values
  1504     2002                     	org	8194
  1505     2002  3FFF               	dw	16383
  1506                           
  1507                           ;Config register IDLOC3 @ 0x2003
  1508                           ;	unspecified, using default values
  1509     2003                     	org	8195
  1510     2003  3FFF               	dw	16383
  1511                           
  1512                           	psect	config
  1513                           
  1514                           ;Config register CONFIG1 @ 0x2007
  1515                           ;	Oscillator Selection bits
  1516                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1517                           ;	Watchdog Timer Enable bit
  1518                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1519                           ;	Power-up Timer Enable bit
  1520                           ;	PWRTE = OFF, PWRT disabled
  1521                           ;	RE3/MCLR pin function select bit
  1522                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1523                           ;	Code Protection bit
  1524                           ;	CP = OFF, Program memory code protection is disabled
  1525                           ;	Data Code Protection bit
  1526                           ;	CPD = OFF, Data memory code protection is disabled
  1527                           ;	Brown Out Reset Selection bits
  1528                           ;	BOREN = OFF, BOR disabled
  1529                           ;	Internal External Switchover bit
  1530                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1531                           ;	Fail-Safe Clock Monitor Enabled bit
  1532                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1533                           ;	Low Voltage Programming Enable bit
  1534                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1535                           ;	In-Circuit Debugger Mode bit
  1536                           ;	DEBUG = 0x1, unprogramme  1537     2007                     	org	8199
  1538     2007  20D4               	dw	8404
  1539                           
  1540                           ;Config register CONFIG2 @ 0x2008
  1541                           ;	Brown-out Reset Selection bit
  1542                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1543                           ;	Flash Program Memory Self Write Enable bits
  1544                           ;	WRT = OFF, Write protection off
  1545     2008                     	org	8200
  1546     2008  3FFF               	dw	16383

Data Sizes:
    Strings     3
    Constant    11
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     25      28
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_2(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 2
		 -> dato(BANK0[2]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    cadena@txt	PTR unsigned char  size(1) Largest target is 2
		 -> dato(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _main in BANK0

    _main->_cadena

Critical Paths under _isr in BANK0

    _isr->_sprintf

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0     123
                                             23 BANK0      2     2      0
                             _cadena
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _cadena                                               4     4      0     123
                                             19 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _isr                                                  6     6      0    1320
                                             13 BANK0      6     6      0
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             21    18      3    1320
                                              0 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              6     2      4     311
                                              8 COMMON     6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _cadena
   _setup

 _isr (ROOT)
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      2A       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     19      1C       5       35.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      2A      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Sat May 13 22:51:24 2023

                      pc 0002                       l70 01EB                       l83 01F1  
                     l87 0217                       fsr 0004                      u470 01F5  
                    u471 01F4                      u480 020C                      u481 020B  
                    u537 0229                      u547 0212                      _isr 00F8  
                    fsr0 0004                      indf 0000                     l1011 01BD  
                   l1021 01D4                     l1013 01C5                     l1031 01DE  
                   l1023 01D8                     l1015 01C8                     l1041 0201  
                   l1025 01D9                     l1017 01CC                     l1043 020C  
                   l1035 01EF                     l1027 01DA                     l1019 01D0  
                   l1037 01F5                     l1029 01DC                     l1039 01FD  
                   l1071 021D                     l1073 0223                     l1069 0218  
                   ?_isr 0070                     STR_1 0243                     STR_2 0243  
                   _IOCB 0096                     _PIE1 008C                     _PIR1 000C  
                   i1l67 0134                     _WPUB 0095                     _data 0242  
                   _dato 003A                     _main 0218                     btemp 007E  
                   start 0012                    ??_isr 002D                    ?_main 0070  
                  _ANSEL 0188          __end_of___lwdiv 0183          __end_of___lwmod 01BD  
                  i1l197 00F7                    i1l473 0182                    i1l483 01BC  
                  i1l901 013F                    i1l911 0155                    i1l903 0141  
                  i1l921 0178                    i1l913 0159                    i1l905 0147  
                  i1l915 016A                    i1l907 014A                    i1l923 017E  
                  i1l931 018C                    i1l917 0170                    i1l909 0151  
                  i1l941 01AB                    i1l933 0193                    i1l919 0171  
                  i1l943 01B2                    i1l935 0197                    i1l927 0183  
                  i1l951 0024                    i1l937 019B                    i1l929 0189  
                  i1l945 01B8                    i1l961 0035                    i1l953 002A  
                  i1l939 01A5                    i1l971 0066                    i1l963 0052  
                  i1l955 002F                    i1l973 006B                    i1l965 005A  
                  i1l957 0034                    i1l949 0021                    i1l991 00A2  
                  i1l983 0089                    i1l967 005E                    i1l993 00A5  
                  i1l985 0093                    i1l969 0062                    i1l995 00D1  
                  i1l987 0099                    i1l979 006D                    i1l997 00D6  
                  i1l989 009E                    i1l999 00DA                    _RCREG 001A  
                  _RCSTA 0018                    u30_25 015A                    u31_20 016A  
                  u31_21 0169                    u31_25 0166                    u40_20 002A  
                  u40_21 0029                    u32_25 0172                    u33_20 017E  
                  u41_20 0062                    u33_21 017D                    u41_21 0061  
                  u34_20 0189                    u42_20 0088                    u50_20 0102  
                  u34_21 0188                    u42_21 0087                    u50_21 0101  
                  _SPBRG 0099                    u42_25 0084                    u27_20 0147  
                  u43_20 0093                    u51_20 0106                    u27_21 0146  
                  u43_21 0092                    u51_21 0105                    _PORTA 0005  
                  _PORTB 0006                    u35_25 018D                    u36_20 019B  
                  u44_20 0099                    u52_20 011F                    u36_21 019A  
                  u44_21 0098                    u52_21 011E                    u28_25 014B  
                  u29_20 0159                    u37_20 01A5                    u45_20 00E3  
                  u29_21 0158                    u37_21 01A4                    u45_21 00E2  
                  u37_25 01A1                    u46_20 00F3                    u46_21 00F2  
                  u38_25 01AC                    u39_20 01B8                    u39_21 01B7  
                  u49_20 00FC                    u49_21 00FB                    _TRISA 0085  
                  _TRISB 0086                    _TXREG 0019                    _TXSTA 0098  
        __end_of_dpowers 0242                    _setup 01BD                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 00F8  
        __initialization 0015             __end_of_data 0243             __end_of_main 0232  
                 ??_main 0037                   ?_setup 0070                   _ANSELH 0189  
                 i1l1001 00E3                   i1l1003 00F3                   i1l1051 0102  
                 i1l1061 0121                   i1l1053 0106                   i1l1045 00F8  
                 i1l1055 010A                   i1l1063 0130                   i1l1047 00FC  
                 i1l1065 0131                   i1l1057 0119                   i1l1049 00FE  
                 i1l1059 011F                   i1l1095 0047                   _INTCON 000B  
                 _OSCCON 008F                   _SPBRGH 009A                   _cadena 01EC  
              ??___lwdiv 0074                ??___lwmod 007C                   saved_w 007E  
              ??_sprintf 0023  __end_of__initialization 001A           __pcstackCOMMON 0070  
          __end_of_setup 01EC                  ??_setup 0033               __pbssBANK0 0039  
             __pmaintext 0218                  ?_cadena 0070               __pintentry 0004  
                _BAUDCTL 0187               __stringtab 0232                  ___lwdiv 013F  
                ___lwmod 0183                  cadena@i 0036                  __ptext1 01BD  
                __ptext2 01EC                  __ptext3 00F8                  __ptext4 001E  
                __ptext5 0183                  __ptext6 013F                  _dpowers 0238  
                _sprintf 001E     end_of_initialization 001A                _PORTBbits 0006  
         __end_of_cadena 0218      start_initialization 0015              __end_of_isr 013F  
               ??_cadena 0033                ___latbits 0002            __pcstackBANK0 0020  
            sprintf@flag 0027              sprintf@prec 0028         ___lwdiv@dividend 0072  
              cadena@txt 0035                 ?___lwdiv 0070                 ?___lwmod 0078  
              __pstrings 0232         ___lwdiv@quotient 0075                 ?_sprintf 0020  
      interrupt_function 0004                 _PIR1bits 000C              __stringbase 0237  
     __end_of__stringtab 0238               sprintf@val 0029          ___lwdiv@divisor 0070  
        ___lwdiv@counter 0077                 _contador 0039               _INTCONbits 000B  
               intlevel1 0000                sprintf@ap 0026                sprintf@sp 002B  
       ___lwmod@dividend 007A                stringcode 0232               _OPTION_REG 0081  
               sprintf@c 002C                 sprintf@f 0020          ___lwmod@divisor 0078  
        ___lwmod@counter 007D                 stringdir 0232                 stringtab 0232  
